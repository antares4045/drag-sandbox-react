import React, {Component} from 'react'

import NodePort from 'components/sandbox/NodePort'



class Node extends Component{

    constructor(props){
        super(props)

        this.state = {
            pos : props.pos,
            anchor : {x:0, y:0},
        }

        this.posToCoord = props.posToCoord
    }
    onMouseDown(event){
        event.stopPropagation();
        const {nativeEvent} = event
        this.setState({anchor : this.posToCoord(nativeEvent).sub(this.state.pos)})

        this.props.startCursorMoveHandlering(this)
    }
    // onMouseUp(event){
    //     event.stopPropagation();
    //     this.setState({anchored: false})
    // }
    onMouseMove(event){
        const {nativeEvent} = event
        const pos = this.posToCoord(nativeEvent).sub(this.state.anchor)
        this.props.updPos(pos)
        this.setState({pos})

    }
    // onMouseOut(event){
    //     if(this.state.anchored){
    //         event.stopPropagation()
    //         const {nativeEvent} = event

    //         this.setState({pos : this.posToCoord(nativeEvent).sub(this.state.anchor)})
    //     }
    // }
    render() {

        const {pos} = this.state
        return (
            <g style={{transform: `translate(${pos.x}px, ${pos.y}px)`}}>

                <rect width="50px" height="50px" 
                    fill="red"
                    onMouseDown={(e) => this.onMouseDown(e)}                
                />
                {this.props.ports.map((params) => {
                   return (<NodePort {...params} 
                                tryStartConnection={() => this.props.tryStartConnection({port: params.key})} 
                                tryEndConnection={() => this.props.tryEndConnection({port: params.key})} 
                                key={params.key}></NodePort>)
                })}
            </g>
            
            )
    }
}

                // onClick={(e) => this.onMouseUp(e)}
                // onMouseMoveCapture={(e) => this.onMouseMove(e)}

export default Node


